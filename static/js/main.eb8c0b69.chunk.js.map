{"version":3,"sources":["Components/Calculator.js","Components/CalcButton.js","Components/CalcDisplay.js","Components/ResultDisplay.js","logo.svg","App.js","serviceWorker.js","index.js"],"names":["btnvals","Calculator","props","calcButtonHandler","e","value","target","setState","displayValue","result","state","slice","isNaN","charAt","length","eval","prevState","bind","this","className","map","btnVal","id","Component","CalcButton","cssClassName","type","onClick","CalcDisplay","ResultDisplay","module","exports","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"m8CAMMA,QAAU,CAAC,IAAK,MAAO,IAAK,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,IAAK,EAAG,IAAK,KAE9EC,W,qBACF,oBAAYC,OAAQ,IAAD,8IACf,4QAAMA,QADS,MASnBC,kBAAoB,SAACC,GAGjB,IAAIC,MAAQD,EAAEE,OAAOD,MAER,KAATA,MACA,MAAKE,SAAS,CACVC,aAAc,GACdC,OAAQ,KAIE,OAATJ,MACL,MAAKE,UAAS,iBACT,CACGC,aAAc,MAAKE,MAAMF,aAAaG,MAAM,GAAI,GAChDF,OAAQG,MAAM,MAAKF,MAAMF,aAAaK,OAAO,MAAKH,MAAMF,aAAaM,OAAS,IAC1EC,KAAK,MAAKL,MAAMF,aAAaG,MAAM,GAAI,IACvCI,KAAK,MAAKL,MAAMF,aAAaG,MAAM,GAAI,QAGrC,KAATN,MACL,MAAKE,UAAS,iBAAO,CACjBC,aAAc,MAAKE,MAAMD,OACzBA,OAAQ,OAMZ,MAAKF,UAAS,SAACS,WAAD,MACT,CACGR,aAAcQ,UAAUR,aAAeH,MACvCI,OAAQG,MAAMP,OAAS,MAAKK,MAAMD,OAASM,KAAKC,UAAUR,aAAeH,YAxCrF,MAAKK,MAAQ,CACTF,aAAc,GACdC,OAAQ,IAEZ,MAAKN,kBAAoB,MAAKA,kBAAkBc,KAAvB,+HANV,M,gSAgDT,IAAD,SAC4BC,KAAKR,MAA9BF,EADH,EACGA,aAAcC,EADjB,EACiBA,OACtB,OACI,kEAAKU,UAAW,aACZ,2DAAC,4CAAD,CAAaX,aAAcA,IAC3B,2DAAC,+CAAD,CAAeC,OAAQA,IACtBT,QAAQoB,KAAI,SAAAC,GAAM,OAAI,2DAAC,2CAAD,CAAYC,GAAID,EAAQhB,MAAOgB,EAAQlB,kBAAmB,EAAKA,4B,YAvD7EoB,8CA6DVtB,kC,oFCjETuB,G,sLAGD,IAAD,EACuCN,KAAKhB,MAAjCoB,EADX,EACWA,GAAGjB,EADd,EACcA,MAAMF,EADpB,EACoBA,kBACZsB,EAAkB,KAAJH,GAAc,KAAJA,EAAS,oBAAoB,UACzD,OACI,4BAAQH,UAAWM,EAAcC,KAAK,SAASJ,GAAIA,EAAIjB,MAAOA,EAAOsB,QAASxB,GAAoBE,O,GAPrFkB,cAYVC,O,oFCdTI,E,iLAEE,OACI,yBAAKT,UAAW,WAAYD,KAAKhB,MAAMM,kB,GAHzBe,aAQXK,O,oFCRTC,E,iLAEE,OACI,yBAAKV,UAAW,yBAA0BD,KAAKhB,MAAMO,Y,GAHrCc,aAQbM,O,uECVfC,EAAOC,QAAU,IAA0B,kC,sHCa5BC,MARf,WACE,OACE,yBAAKb,UAAU,OACb,kBAAClB,EAAA,EAAD,QCIcgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.eb8c0b69.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport CalcButton from './CalcButton'\r\nimport CalcDisplay from './CalcDisplay'\r\nimport './myStyles.css'\r\nimport ResultDisplay from './ResultDisplay'\r\n\r\nconst btnvals = ['C', 'del', '+', 7, 8, 9, '-', 4, 5, 6, '*', 1, 2, 3, '/', 0, '.', '=']\r\n\r\nclass Calculator extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            displayValue: '',\r\n            result: ''\r\n        }\r\n        this.calcButtonHandler = this.calcButtonHandler.bind(this)\r\n    }\r\n\r\n    calcButtonHandler = (e) => {\r\n\r\n\r\n        let value = e.target.value\r\n\r\n        if (value == 'C') {\r\n            this.setState({\r\n                displayValue: '',\r\n                result: '',\r\n\r\n            })\r\n        }\r\n        else if (value == 'del') {\r\n            this.setState(() =>\r\n                ({\r\n                    displayValue: this.state.displayValue.slice(0, -1),\r\n                    result: isNaN(this.state.displayValue.charAt(this.state.displayValue.length - 2)) ?\r\n                        eval(this.state.displayValue.slice(0, -2)) :\r\n                        eval(this.state.displayValue.slice(0, -1))\r\n                }))\r\n        }\r\n        else if (value == '=') {\r\n            this.setState(() => ({\r\n                displayValue: this.state.result,\r\n                result: ''\r\n            }))\r\n\r\n        }\r\n        \r\n        else {\r\n            this.setState((prevState) =>\r\n                ({\r\n                    displayValue: prevState.displayValue + value,\r\n                    result: isNaN(value) ? this.state.result : eval(prevState.displayValue + value)\r\n                }))\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        const { displayValue, result } = this.state\r\n        return (\r\n            <div className={'container'}>\r\n                <CalcDisplay displayValue={displayValue} />\r\n                <ResultDisplay result={result} />\r\n                {btnvals.map(btnVal => <CalcButton id={btnVal} value={btnVal} calcButtonHandler={this.calcButtonHandler}   ></CalcButton>)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Calculator","import React,{Component} from 'react'\r\nimport './myStyles.css'\r\n\r\n\r\nclass CalcButton extends Component{\r\n   \r\n    render()\r\n    {\r\n        const {id,value,calcButtonHandler}=this.props\r\n        let cssClassName=(id=='='|| id=='C')?'btnNbrs  btnLarge':'btnNbrs'\r\n        return(\r\n            <button className={cssClassName} type='button' id={id} value={value} onClick={calcButtonHandler}>{value}</button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CalcButton","import React, { Component } from 'react'\r\n\r\nclass CalcDisplay extends Component {\r\n    render() {\r\n        return (\r\n            <div className={'display'}>{this.props.displayValue}</div>\r\n            )\r\n    }\r\n}\r\n\r\nexport default CalcDisplay","import React, { Component } from 'react'\r\n\r\nclass ResultDisplay extends Component {\r\n    render() {\r\n        return (\r\n            <div className={'display resultDisplay'}>{this.props.result}</div>\r\n            )\r\n    }\r\n}\r\n\r\nexport default ResultDisplay","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Calculator from './Components/Calculator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calculator/>\n    </div>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}